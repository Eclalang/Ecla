import console;
import encoding;

# this is an implementation of a brainfuck interpreter using the ECLA programing language
function interpret(code : string, debug : bool) {
    var memory []int = [0,0,0,0,0];
    var memoryPointer int = 0;
    var codePointer int = 0;
    var instruction string;
    var codeLen int = strLen(code);
    while (codePointer < codeLen){
        instruction = code[codePointer];
        if (debug){
            console.println("instruction: ",instruction);
            console.println("memory: ",memory);
            console.println("          "+"  "*memoryPointer+"^");
            console.input("press enter to continue");
        }
        if (instruction == "+"){
            if (memory[memoryPointer] == 255){
                memory[memoryPointer] = 0;
            } else {
                memory[memoryPointer] = memory[memoryPointer] + 1;
            }
        } else if (instruction == "-"){
            if (memory[memoryPointer] == 0){
                memory[memoryPointer] = 255;
            } else {
                memory[memoryPointer] = memory[memoryPointer] - 1;
            }
        } else if (instruction == ">"){
            memoryPointer++;
            if (memoryPointer >= intArrLen(memory)){
                memory = memory + [0];
            }
        } else if (instruction == "<"){
            memoryPointer--;
        } else if (instruction == "."){
            console.print(encoding.asciiToString([memory[memoryPointer]]));
        } else if (instruction == ","){
            var temp string = console.input("input: ");
            var fChar string = temp[0];
            var encoded []int = encoding.stringToAscii(fChar);
            memory[memoryPointer] = encoded[0];
        } else if (instruction == "["){
            if (memory[memoryPointer] == 0){
                var depth int = 1;
                while (depth > 0){
                    codePointer++;
                    if (code[codePointer] == "["){
                        depth++;
                    } else if (code[codePointer] == "]"){
                        depth--;
                    }
                }
            }
        } else if (instruction == "]"){
            if (memory[memoryPointer] != 0){
                var depth int = 1;
                while (depth > 0){
                    codePointer--;
                    if (code[codePointer] == "]"){
                        depth++;
                    } else if (code[codePointer] == "["){
                        depth--;
                    }
                }
            }
        }
        codePointer++;
    }
}

# this is a function that returns the length of a string
function strLen(s : string) (int) {
    var count int = 0;

    for (x,y range s){
        count++;
    }
    return count;
}

# this is a function that returns the length of an array
function intArrLen(a : []int) (int) {
    var count int = 0;
    for (x,y range a){
        count++;
    }
    return count;
}


# ------------------ test code ------------------

var NoDebug bool = false;
var Debug bool = true;

console.println(
"this is a the first program wrote using the ECLA programming language
it is a brainfuck interpreter
The next line should be HelloWorld!"
);
interpret("++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++<<+++++++++++++++.>.+++.------.--------.>+.>.",NoDebug);

console.println(
"this is a the second program wrote using the ECLA programming language
it is a brainfuck interpreter
The next should outputs square numbers from 0 to 10000"
);

interpret("++++[>+++++<-]>[<+++++>-]+<+[>[>+>+<<-]++>>[<<+>>-]>>>[-]++>[-]+>>>+[[-]++++++>>>]<<<[[<++++++++<++>>-]+<.<[>----<-]<]<<[>>>>>[>>>[-]+++++++++<[>-<-]+++++++++>[-[<->-]+[<<<]]<[>+<-]>]<<-]<<-]",NoDebug);


