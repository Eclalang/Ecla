import "console";

struct Test {
    test : string;
}

# struct creation
struct Point {

    # simple fields
    x : int;
    y : int;

    # function fields
    printSelf : function(Point);

    # embedded structs
    test : Test;

    intArray : [][]int;

    stringMap : map[string]int
}

function printSelf (p : Point) {
    console.println(p.test.test, p.y,p.x);
}

function getPoint (p : Point)  (Point ){
    return p;
}

# instantiate a struct
var p Point = Point{1, 2, printSelf, Test{"test"},[[1,2],[3,4]],{"douze" : 12, "onze" : 11}};

# access fields
console.println(p.x, p.y);

# modify fields
p.x = 3;
p.y = 4;
console.println(p.x, p.y);

p.intArray[0][0] = 12;

console.println(p.intArray[0][0]);

p.stringMap["onze"] = 78;

console.println(p.stringMap["onze"]);


# access struct fields from value returned by function
getPoint(p).printSelf(p);

# access struct fields from value in array
var arr []Point = [p];
console.println(arr[0].x, arr[0].y);

# access struct fields from value in map
var m map[string]Point = {"p": p};
console.println(m["p"].x, m["p"].y);

# call function fields
p.printSelf(p);

# access embedded struct fields
console.println(p.test.test);

# use a struct field in a binary operation
var p2 int = p.x + p.y;
console.println(p2);

# use a field of a struct field in a binary operation
var p3 string = p.test.test + p.test.test;
console.println(p3);


